<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:util="http://www.springframework.org/schema/util" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:jaxws="http://cxf.apache.org/jaxws" xmlns:jaxrs="http://cxf.apache.org/jaxrs" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd 
   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
   http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
">

	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/config/config.properties</value>
				<value>classpath:/config/jdbc.druid.properties</value>
			</list>
		</property>
	</bean>
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="driverClassName" value="${driverClassName}" />
		<property name="filters" value="${filters}" />

		<property name="maxActive" value="${maxActive}" />
		<property name="initialSize" value="${initialSize}" />
		<property name="maxWait" value="${maxWait}" />
		<property name="minIdle" value="${minIdle}" />

		<property name="timeBetweenEvictionRunsMillis" value="${timeBetweenEvictionRunsMillis}" />
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${maxPoolPreparedStatementPerConnectionSize}" />
	</bean>
	<!-- Spring提供的myBatis的SqlMap配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/config/mybatis.xml" />
		<property name="mapperLocations" value="classpath*:cn/com/sxit/wearable/appserver/mapper/*.xml" />
	</bean>
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!--MapperScannerConfigurer配置 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!--basePackage指定要扫描的包，在此包之下的映射器都会被 搜索到。可指定多个包，包与包之间用逗号或分号分隔 -->
		<property name="basePackage" value="cn.com.sxit.wearable.appserver.mapper" />
	</bean>
	<context:component-scan base-package="cn.com.sxit.wearable.appserver">
		<!-- <context:include-filter type="regex" expression=".dao" /> -->
	</context:component-scan>

	<!-- netty <bean id="bossGroup" class="io.netty.channel.epoll.EpollEventLoopGroup"> <constructor-arg type="int" index="0" value="${boss.thread.count}" /> <constructor-arg index="1" ref="bossThreadFactory" 
		/> </bean> <bean id="workerGroup" class="io.netty.channel.epoll.EpollEventLoopGroup"> <constructor-arg type="int" index="0" value="${worker.thread.count}" /> <constructor-arg index="1" ref="workerThreadFactory" 
		/> </bean> <bean id="bossThreadFactory" class="org.nerdronix.NamedThreadFactory"> <constructor-arg type="String" value="Server-Boss" /> </bean> <bean id="workerThreadFactory" class="org.nerdronix.NamedThreadFactory"> 
		<constructor-arg type="String" index="0" value="Server-Worker" /> </bean> -->
	<!-- Netty options for server bootstrap <util:map id="tcpChannelOptions" map-class="java.util.HashMap"> <entry> <key> <util:constant static-field="io.netty.channel.ChannelOption.SO_KEEPALIVE" /> </key> 
		<value type="java.lang.Boolean">${so.keepalive}</value> </entry> <entry> <key> <util:constant static-field="io.netty.channel.ChannelOption.SO_BACKLOG" /> </key> <value type="java.lang.Integer">${so.backlog}</value> 
		</entry> </util:map> -->
		
<bean id="testUserDao" class="org.mybatis.spring.mapper.MapperFactoryBean">  
    <property name="mapperInterface" value="cn.com.sxit.wearable.appserver.dao.TestUserDao"></property>  
     <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>  
 </bean>
</beans>